// Code generated by ent, DO NOT EDIT.

package refund

import (
	"pay/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// OrderNo applies equality check predicate on the "order_no" field. It's identical to OrderNoEQ.
func OrderNo(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderNo), v))
	})
}

// RefundNo applies equality check predicate on the "refund_no" field. It's identical to RefundNoEQ.
func RefundNo(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefundNo), v))
	})
}

// RefundID applies equality check predicate on the "refund_id" field. It's identical to RefundIDEQ.
func RefundID(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefundID), v))
	})
}

// TotalFee applies equality check predicate on the "total_fee" field. It's identical to TotalFeeEQ.
func TotalFee(v int64) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalFee), v))
	})
}

// Refund applies equality check predicate on the "refund" field. It's identical to RefundEQ.
func Refund(v int64) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefund), v))
	})
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReason), v))
	})
}

// RefundStatus applies equality check predicate on the "refund_status" field. It's identical to RefundStatusEQ.
func RefundStatus(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefundStatus), v))
	})
}

// ContentReturn applies equality check predicate on the "content_return" field. It's identical to ContentReturnEQ.
func ContentReturn(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContentReturn), v))
	})
}

// ContentNotify applies equality check predicate on the "content_notify" field. It's identical to ContentNotifyEQ.
func ContentNotify(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContentNotify), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// OrderNoEQ applies the EQ predicate on the "order_no" field.
func OrderNoEQ(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderNo), v))
	})
}

// OrderNoNEQ applies the NEQ predicate on the "order_no" field.
func OrderNoNEQ(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderNo), v))
	})
}

// OrderNoIn applies the In predicate on the "order_no" field.
func OrderNoIn(vs ...string) predicate.Refund {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderNo), v...))
	})
}

// OrderNoNotIn applies the NotIn predicate on the "order_no" field.
func OrderNoNotIn(vs ...string) predicate.Refund {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderNo), v...))
	})
}

// OrderNoGT applies the GT predicate on the "order_no" field.
func OrderNoGT(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderNo), v))
	})
}

// OrderNoGTE applies the GTE predicate on the "order_no" field.
func OrderNoGTE(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderNo), v))
	})
}

// OrderNoLT applies the LT predicate on the "order_no" field.
func OrderNoLT(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderNo), v))
	})
}

// OrderNoLTE applies the LTE predicate on the "order_no" field.
func OrderNoLTE(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderNo), v))
	})
}

// OrderNoContains applies the Contains predicate on the "order_no" field.
func OrderNoContains(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOrderNo), v))
	})
}

// OrderNoHasPrefix applies the HasPrefix predicate on the "order_no" field.
func OrderNoHasPrefix(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOrderNo), v))
	})
}

// OrderNoHasSuffix applies the HasSuffix predicate on the "order_no" field.
func OrderNoHasSuffix(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOrderNo), v))
	})
}

// OrderNoEqualFold applies the EqualFold predicate on the "order_no" field.
func OrderNoEqualFold(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOrderNo), v))
	})
}

// OrderNoContainsFold applies the ContainsFold predicate on the "order_no" field.
func OrderNoContainsFold(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOrderNo), v))
	})
}

// RefundNoEQ applies the EQ predicate on the "refund_no" field.
func RefundNoEQ(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefundNo), v))
	})
}

// RefundNoNEQ applies the NEQ predicate on the "refund_no" field.
func RefundNoNEQ(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRefundNo), v))
	})
}

// RefundNoIn applies the In predicate on the "refund_no" field.
func RefundNoIn(vs ...string) predicate.Refund {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRefundNo), v...))
	})
}

// RefundNoNotIn applies the NotIn predicate on the "refund_no" field.
func RefundNoNotIn(vs ...string) predicate.Refund {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRefundNo), v...))
	})
}

// RefundNoGT applies the GT predicate on the "refund_no" field.
func RefundNoGT(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRefundNo), v))
	})
}

// RefundNoGTE applies the GTE predicate on the "refund_no" field.
func RefundNoGTE(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRefundNo), v))
	})
}

// RefundNoLT applies the LT predicate on the "refund_no" field.
func RefundNoLT(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRefundNo), v))
	})
}

// RefundNoLTE applies the LTE predicate on the "refund_no" field.
func RefundNoLTE(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRefundNo), v))
	})
}

// RefundNoContains applies the Contains predicate on the "refund_no" field.
func RefundNoContains(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRefundNo), v))
	})
}

// RefundNoHasPrefix applies the HasPrefix predicate on the "refund_no" field.
func RefundNoHasPrefix(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRefundNo), v))
	})
}

// RefundNoHasSuffix applies the HasSuffix predicate on the "refund_no" field.
func RefundNoHasSuffix(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRefundNo), v))
	})
}

// RefundNoEqualFold applies the EqualFold predicate on the "refund_no" field.
func RefundNoEqualFold(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRefundNo), v))
	})
}

// RefundNoContainsFold applies the ContainsFold predicate on the "refund_no" field.
func RefundNoContainsFold(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRefundNo), v))
	})
}

// RefundIDEQ applies the EQ predicate on the "refund_id" field.
func RefundIDEQ(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefundID), v))
	})
}

// RefundIDNEQ applies the NEQ predicate on the "refund_id" field.
func RefundIDNEQ(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRefundID), v))
	})
}

// RefundIDIn applies the In predicate on the "refund_id" field.
func RefundIDIn(vs ...string) predicate.Refund {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRefundID), v...))
	})
}

// RefundIDNotIn applies the NotIn predicate on the "refund_id" field.
func RefundIDNotIn(vs ...string) predicate.Refund {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRefundID), v...))
	})
}

// RefundIDGT applies the GT predicate on the "refund_id" field.
func RefundIDGT(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRefundID), v))
	})
}

// RefundIDGTE applies the GTE predicate on the "refund_id" field.
func RefundIDGTE(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRefundID), v))
	})
}

// RefundIDLT applies the LT predicate on the "refund_id" field.
func RefundIDLT(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRefundID), v))
	})
}

// RefundIDLTE applies the LTE predicate on the "refund_id" field.
func RefundIDLTE(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRefundID), v))
	})
}

// RefundIDContains applies the Contains predicate on the "refund_id" field.
func RefundIDContains(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRefundID), v))
	})
}

// RefundIDHasPrefix applies the HasPrefix predicate on the "refund_id" field.
func RefundIDHasPrefix(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRefundID), v))
	})
}

// RefundIDHasSuffix applies the HasSuffix predicate on the "refund_id" field.
func RefundIDHasSuffix(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRefundID), v))
	})
}

// RefundIDEqualFold applies the EqualFold predicate on the "refund_id" field.
func RefundIDEqualFold(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRefundID), v))
	})
}

// RefundIDContainsFold applies the ContainsFold predicate on the "refund_id" field.
func RefundIDContainsFold(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRefundID), v))
	})
}

// TotalFeeEQ applies the EQ predicate on the "total_fee" field.
func TotalFeeEQ(v int64) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalFee), v))
	})
}

// TotalFeeNEQ applies the NEQ predicate on the "total_fee" field.
func TotalFeeNEQ(v int64) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalFee), v))
	})
}

// TotalFeeIn applies the In predicate on the "total_fee" field.
func TotalFeeIn(vs ...int64) predicate.Refund {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTotalFee), v...))
	})
}

// TotalFeeNotIn applies the NotIn predicate on the "total_fee" field.
func TotalFeeNotIn(vs ...int64) predicate.Refund {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTotalFee), v...))
	})
}

// TotalFeeGT applies the GT predicate on the "total_fee" field.
func TotalFeeGT(v int64) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalFee), v))
	})
}

// TotalFeeGTE applies the GTE predicate on the "total_fee" field.
func TotalFeeGTE(v int64) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalFee), v))
	})
}

// TotalFeeLT applies the LT predicate on the "total_fee" field.
func TotalFeeLT(v int64) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalFee), v))
	})
}

// TotalFeeLTE applies the LTE predicate on the "total_fee" field.
func TotalFeeLTE(v int64) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalFee), v))
	})
}

// RefundEQ applies the EQ predicate on the "refund" field.
func RefundEQ(v int64) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefund), v))
	})
}

// RefundNEQ applies the NEQ predicate on the "refund" field.
func RefundNEQ(v int64) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRefund), v))
	})
}

// RefundIn applies the In predicate on the "refund" field.
func RefundIn(vs ...int64) predicate.Refund {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRefund), v...))
	})
}

// RefundNotIn applies the NotIn predicate on the "refund" field.
func RefundNotIn(vs ...int64) predicate.Refund {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRefund), v...))
	})
}

// RefundGT applies the GT predicate on the "refund" field.
func RefundGT(v int64) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRefund), v))
	})
}

// RefundGTE applies the GTE predicate on the "refund" field.
func RefundGTE(v int64) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRefund), v))
	})
}

// RefundLT applies the LT predicate on the "refund" field.
func RefundLT(v int64) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRefund), v))
	})
}

// RefundLTE applies the LTE predicate on the "refund" field.
func RefundLTE(v int64) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRefund), v))
	})
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReason), v))
	})
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReason), v))
	})
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.Refund {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReason), v...))
	})
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.Refund {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReason), v...))
	})
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReason), v))
	})
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReason), v))
	})
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReason), v))
	})
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReason), v))
	})
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReason), v))
	})
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReason), v))
	})
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReason), v))
	})
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReason), v))
	})
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReason), v))
	})
}

// RefundStatusEQ applies the EQ predicate on the "refund_status" field.
func RefundStatusEQ(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefundStatus), v))
	})
}

// RefundStatusNEQ applies the NEQ predicate on the "refund_status" field.
func RefundStatusNEQ(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRefundStatus), v))
	})
}

// RefundStatusIn applies the In predicate on the "refund_status" field.
func RefundStatusIn(vs ...string) predicate.Refund {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRefundStatus), v...))
	})
}

// RefundStatusNotIn applies the NotIn predicate on the "refund_status" field.
func RefundStatusNotIn(vs ...string) predicate.Refund {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRefundStatus), v...))
	})
}

// RefundStatusGT applies the GT predicate on the "refund_status" field.
func RefundStatusGT(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRefundStatus), v))
	})
}

// RefundStatusGTE applies the GTE predicate on the "refund_status" field.
func RefundStatusGTE(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRefundStatus), v))
	})
}

// RefundStatusLT applies the LT predicate on the "refund_status" field.
func RefundStatusLT(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRefundStatus), v))
	})
}

// RefundStatusLTE applies the LTE predicate on the "refund_status" field.
func RefundStatusLTE(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRefundStatus), v))
	})
}

// RefundStatusContains applies the Contains predicate on the "refund_status" field.
func RefundStatusContains(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRefundStatus), v))
	})
}

// RefundStatusHasPrefix applies the HasPrefix predicate on the "refund_status" field.
func RefundStatusHasPrefix(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRefundStatus), v))
	})
}

// RefundStatusHasSuffix applies the HasSuffix predicate on the "refund_status" field.
func RefundStatusHasSuffix(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRefundStatus), v))
	})
}

// RefundStatusEqualFold applies the EqualFold predicate on the "refund_status" field.
func RefundStatusEqualFold(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRefundStatus), v))
	})
}

// RefundStatusContainsFold applies the ContainsFold predicate on the "refund_status" field.
func RefundStatusContainsFold(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRefundStatus), v))
	})
}

// ContentReturnEQ applies the EQ predicate on the "content_return" field.
func ContentReturnEQ(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContentReturn), v))
	})
}

// ContentReturnNEQ applies the NEQ predicate on the "content_return" field.
func ContentReturnNEQ(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContentReturn), v))
	})
}

// ContentReturnIn applies the In predicate on the "content_return" field.
func ContentReturnIn(vs ...string) predicate.Refund {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldContentReturn), v...))
	})
}

// ContentReturnNotIn applies the NotIn predicate on the "content_return" field.
func ContentReturnNotIn(vs ...string) predicate.Refund {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldContentReturn), v...))
	})
}

// ContentReturnGT applies the GT predicate on the "content_return" field.
func ContentReturnGT(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContentReturn), v))
	})
}

// ContentReturnGTE applies the GTE predicate on the "content_return" field.
func ContentReturnGTE(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContentReturn), v))
	})
}

// ContentReturnLT applies the LT predicate on the "content_return" field.
func ContentReturnLT(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContentReturn), v))
	})
}

// ContentReturnLTE applies the LTE predicate on the "content_return" field.
func ContentReturnLTE(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContentReturn), v))
	})
}

// ContentReturnContains applies the Contains predicate on the "content_return" field.
func ContentReturnContains(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContentReturn), v))
	})
}

// ContentReturnHasPrefix applies the HasPrefix predicate on the "content_return" field.
func ContentReturnHasPrefix(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContentReturn), v))
	})
}

// ContentReturnHasSuffix applies the HasSuffix predicate on the "content_return" field.
func ContentReturnHasSuffix(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContentReturn), v))
	})
}

// ContentReturnEqualFold applies the EqualFold predicate on the "content_return" field.
func ContentReturnEqualFold(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContentReturn), v))
	})
}

// ContentReturnContainsFold applies the ContainsFold predicate on the "content_return" field.
func ContentReturnContainsFold(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContentReturn), v))
	})
}

// ContentNotifyEQ applies the EQ predicate on the "content_notify" field.
func ContentNotifyEQ(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContentNotify), v))
	})
}

// ContentNotifyNEQ applies the NEQ predicate on the "content_notify" field.
func ContentNotifyNEQ(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContentNotify), v))
	})
}

// ContentNotifyIn applies the In predicate on the "content_notify" field.
func ContentNotifyIn(vs ...string) predicate.Refund {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldContentNotify), v...))
	})
}

// ContentNotifyNotIn applies the NotIn predicate on the "content_notify" field.
func ContentNotifyNotIn(vs ...string) predicate.Refund {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldContentNotify), v...))
	})
}

// ContentNotifyGT applies the GT predicate on the "content_notify" field.
func ContentNotifyGT(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContentNotify), v))
	})
}

// ContentNotifyGTE applies the GTE predicate on the "content_notify" field.
func ContentNotifyGTE(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContentNotify), v))
	})
}

// ContentNotifyLT applies the LT predicate on the "content_notify" field.
func ContentNotifyLT(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContentNotify), v))
	})
}

// ContentNotifyLTE applies the LTE predicate on the "content_notify" field.
func ContentNotifyLTE(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContentNotify), v))
	})
}

// ContentNotifyContains applies the Contains predicate on the "content_notify" field.
func ContentNotifyContains(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContentNotify), v))
	})
}

// ContentNotifyHasPrefix applies the HasPrefix predicate on the "content_notify" field.
func ContentNotifyHasPrefix(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContentNotify), v))
	})
}

// ContentNotifyHasSuffix applies the HasSuffix predicate on the "content_notify" field.
func ContentNotifyHasSuffix(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContentNotify), v))
	})
}

// ContentNotifyEqualFold applies the EqualFold predicate on the "content_notify" field.
func ContentNotifyEqualFold(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContentNotify), v))
	})
}

// ContentNotifyContainsFold applies the ContainsFold predicate on the "content_notify" field.
func ContentNotifyContainsFold(v string) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContentNotify), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Refund {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Refund {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Refund {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Refund {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Refund) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Refund) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Refund) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		p(s.Not())
	})
}

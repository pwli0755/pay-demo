// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"pay/internal/data/ent/refund"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Refund is the model entity for the Refund schema.
type Refund struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// OrderNo holds the value of the "order_no" field.
	OrderNo string `json:"order_no,omitempty"`
	// RefundNo holds the value of the "refund_no" field.
	RefundNo string `json:"refund_no,omitempty"`
	// RefundID holds the value of the "refund_id" field.
	RefundID string `json:"refund_id,omitempty"`
	// TotalFee holds the value of the "total_fee" field.
	TotalFee int64 `json:"total_fee,omitempty"`
	// Refund holds the value of the "refund" field.
	Refund int64 `json:"refund,omitempty"`
	// Reason holds the value of the "reason" field.
	Reason string `json:"reason,omitempty"`
	// RefundStatus holds the value of the "refund_status" field.
	RefundStatus string `json:"refund_status,omitempty"`
	// ContentReturn holds the value of the "content_return" field.
	ContentReturn string `json:"content_return,omitempty"`
	// ContentNotify holds the value of the "content_notify" field.
	ContentNotify string `json:"content_notify,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Refund) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case refund.FieldID, refund.FieldTotalFee, refund.FieldRefund:
			values[i] = new(sql.NullInt64)
		case refund.FieldOrderNo, refund.FieldRefundNo, refund.FieldRefundID, refund.FieldReason, refund.FieldRefundStatus, refund.FieldContentReturn, refund.FieldContentNotify:
			values[i] = new(sql.NullString)
		case refund.FieldCreatedAt, refund.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Refund", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Refund fields.
func (r *Refund) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case refund.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int64(value.Int64)
		case refund.FieldOrderNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_no", values[i])
			} else if value.Valid {
				r.OrderNo = value.String
			}
		case refund.FieldRefundNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refund_no", values[i])
			} else if value.Valid {
				r.RefundNo = value.String
			}
		case refund.FieldRefundID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refund_id", values[i])
			} else if value.Valid {
				r.RefundID = value.String
			}
		case refund.FieldTotalFee:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_fee", values[i])
			} else if value.Valid {
				r.TotalFee = value.Int64
			}
		case refund.FieldRefund:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field refund", values[i])
			} else if value.Valid {
				r.Refund = value.Int64
			}
		case refund.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				r.Reason = value.String
			}
		case refund.FieldRefundStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refund_status", values[i])
			} else if value.Valid {
				r.RefundStatus = value.String
			}
		case refund.FieldContentReturn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content_return", values[i])
			} else if value.Valid {
				r.ContentReturn = value.String
			}
		case refund.FieldContentNotify:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content_notify", values[i])
			} else if value.Valid {
				r.ContentNotify = value.String
			}
		case refund.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case refund.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Refund.
// Note that you need to call Refund.Unwrap() before calling this method if this Refund
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Refund) Update() *RefundUpdateOne {
	return (&RefundClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Refund entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Refund) Unwrap() *Refund {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Refund is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Refund) String() string {
	var builder strings.Builder
	builder.WriteString("Refund(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("order_no=")
	builder.WriteString(r.OrderNo)
	builder.WriteString(", ")
	builder.WriteString("refund_no=")
	builder.WriteString(r.RefundNo)
	builder.WriteString(", ")
	builder.WriteString("refund_id=")
	builder.WriteString(r.RefundID)
	builder.WriteString(", ")
	builder.WriteString("total_fee=")
	builder.WriteString(fmt.Sprintf("%v", r.TotalFee))
	builder.WriteString(", ")
	builder.WriteString("refund=")
	builder.WriteString(fmt.Sprintf("%v", r.Refund))
	builder.WriteString(", ")
	builder.WriteString("reason=")
	builder.WriteString(r.Reason)
	builder.WriteString(", ")
	builder.WriteString("refund_status=")
	builder.WriteString(r.RefundStatus)
	builder.WriteString(", ")
	builder.WriteString("content_return=")
	builder.WriteString(r.ContentReturn)
	builder.WriteString(", ")
	builder.WriteString("content_notify=")
	builder.WriteString(r.ContentNotify)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Refunds is a parsable slice of Refund.
type Refunds []*Refund

func (r Refunds) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}

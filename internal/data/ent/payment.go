// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"pay/internal/data/ent/payment"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Payment is the model entity for the Payment schema.
type Payment struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// OrderNo holds the value of the "order_no" field.
	OrderNo string `json:"order_no,omitempty"`
	// TransactionID holds the value of the "transaction_id" field.
	TransactionID string `json:"transaction_id,omitempty"`
	// PaymentType holds the value of the "payment_type" field.
	PaymentType string `json:"payment_type,omitempty"`
	// TradeType holds the value of the "trade_type" field.
	TradeType string `json:"trade_type,omitempty"`
	// TradeState holds the value of the "trade_state" field.
	TradeState string `json:"trade_state,omitempty"`
	// PayerTotal holds the value of the "payer_total" field.
	PayerTotal int64 `json:"payer_total,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Payment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case payment.FieldID, payment.FieldPayerTotal:
			values[i] = new(sql.NullInt64)
		case payment.FieldOrderNo, payment.FieldTransactionID, payment.FieldPaymentType, payment.FieldTradeType, payment.FieldTradeState, payment.FieldContent:
			values[i] = new(sql.NullString)
		case payment.FieldCreatedAt, payment.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Payment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Payment fields.
func (pa *Payment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case payment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int64(value.Int64)
		case payment.FieldOrderNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_no", values[i])
			} else if value.Valid {
				pa.OrderNo = value.String
			}
		case payment.FieldTransactionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_id", values[i])
			} else if value.Valid {
				pa.TransactionID = value.String
			}
		case payment.FieldPaymentType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_type", values[i])
			} else if value.Valid {
				pa.PaymentType = value.String
			}
		case payment.FieldTradeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trade_type", values[i])
			} else if value.Valid {
				pa.TradeType = value.String
			}
		case payment.FieldTradeState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trade_state", values[i])
			} else if value.Valid {
				pa.TradeState = value.String
			}
		case payment.FieldPayerTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field payer_total", values[i])
			} else if value.Valid {
				pa.PayerTotal = value.Int64
			}
		case payment.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				pa.Content = value.String
			}
		case payment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pa.CreatedAt = value.Time
			}
		case payment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pa.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Payment.
// Note that you need to call Payment.Unwrap() before calling this method if this Payment
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Payment) Update() *PaymentUpdateOne {
	return (&PaymentClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the Payment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Payment) Unwrap() *Payment {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Payment is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Payment) String() string {
	var builder strings.Builder
	builder.WriteString("Payment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("order_no=")
	builder.WriteString(pa.OrderNo)
	builder.WriteString(", ")
	builder.WriteString("transaction_id=")
	builder.WriteString(pa.TransactionID)
	builder.WriteString(", ")
	builder.WriteString("payment_type=")
	builder.WriteString(pa.PaymentType)
	builder.WriteString(", ")
	builder.WriteString("trade_type=")
	builder.WriteString(pa.TradeType)
	builder.WriteString(", ")
	builder.WriteString("trade_state=")
	builder.WriteString(pa.TradeState)
	builder.WriteString(", ")
	builder.WriteString("payer_total=")
	builder.WriteString(fmt.Sprintf("%v", pa.PayerTotal))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(pa.Content)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pa.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Payments is a parsable slice of Payment.
type Payments []*Payment

func (pa Payments) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"pay/internal/data/ent/refund"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RefundCreate is the builder for creating a Refund entity.
type RefundCreate struct {
	config
	mutation *RefundMutation
	hooks    []Hook
}

// SetOrderNo sets the "order_no" field.
func (rc *RefundCreate) SetOrderNo(s string) *RefundCreate {
	rc.mutation.SetOrderNo(s)
	return rc
}

// SetRefundNo sets the "refund_no" field.
func (rc *RefundCreate) SetRefundNo(s string) *RefundCreate {
	rc.mutation.SetRefundNo(s)
	return rc
}

// SetRefundID sets the "refund_id" field.
func (rc *RefundCreate) SetRefundID(s string) *RefundCreate {
	rc.mutation.SetRefundID(s)
	return rc
}

// SetTotalFee sets the "total_fee" field.
func (rc *RefundCreate) SetTotalFee(i int64) *RefundCreate {
	rc.mutation.SetTotalFee(i)
	return rc
}

// SetRefund sets the "refund" field.
func (rc *RefundCreate) SetRefund(i int64) *RefundCreate {
	rc.mutation.SetRefund(i)
	return rc
}

// SetReason sets the "reason" field.
func (rc *RefundCreate) SetReason(s string) *RefundCreate {
	rc.mutation.SetReason(s)
	return rc
}

// SetRefundStatus sets the "refund_status" field.
func (rc *RefundCreate) SetRefundStatus(s string) *RefundCreate {
	rc.mutation.SetRefundStatus(s)
	return rc
}

// SetContentReturn sets the "content_return" field.
func (rc *RefundCreate) SetContentReturn(s string) *RefundCreate {
	rc.mutation.SetContentReturn(s)
	return rc
}

// SetContentNotify sets the "content_notify" field.
func (rc *RefundCreate) SetContentNotify(s string) *RefundCreate {
	rc.mutation.SetContentNotify(s)
	return rc
}

// SetCreatedAt sets the "created_at" field.
func (rc *RefundCreate) SetCreatedAt(t time.Time) *RefundCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RefundCreate) SetNillableCreatedAt(t *time.Time) *RefundCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RefundCreate) SetUpdatedAt(t time.Time) *RefundCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RefundCreate) SetNillableUpdatedAt(t *time.Time) *RefundCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RefundCreate) SetID(i int64) *RefundCreate {
	rc.mutation.SetID(i)
	return rc
}

// Mutation returns the RefundMutation object of the builder.
func (rc *RefundCreate) Mutation() *RefundMutation {
	return rc.mutation
}

// Save creates the Refund in the database.
func (rc *RefundCreate) Save(ctx context.Context) (*Refund, error) {
	var (
		err  error
		node *Refund
	)
	rc.defaults()
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RefundMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			if node, err = rc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			if rc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Refund)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RefundMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RefundCreate) SaveX(ctx context.Context) *Refund {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RefundCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RefundCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RefundCreate) defaults() {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := refund.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := refund.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RefundCreate) check() error {
	if _, ok := rc.mutation.OrderNo(); !ok {
		return &ValidationError{Name: "order_no", err: errors.New(`ent: missing required field "Refund.order_no"`)}
	}
	if _, ok := rc.mutation.RefundNo(); !ok {
		return &ValidationError{Name: "refund_no", err: errors.New(`ent: missing required field "Refund.refund_no"`)}
	}
	if _, ok := rc.mutation.RefundID(); !ok {
		return &ValidationError{Name: "refund_id", err: errors.New(`ent: missing required field "Refund.refund_id"`)}
	}
	if _, ok := rc.mutation.TotalFee(); !ok {
		return &ValidationError{Name: "total_fee", err: errors.New(`ent: missing required field "Refund.total_fee"`)}
	}
	if _, ok := rc.mutation.Refund(); !ok {
		return &ValidationError{Name: "refund", err: errors.New(`ent: missing required field "Refund.refund"`)}
	}
	if _, ok := rc.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New(`ent: missing required field "Refund.reason"`)}
	}
	if _, ok := rc.mutation.RefundStatus(); !ok {
		return &ValidationError{Name: "refund_status", err: errors.New(`ent: missing required field "Refund.refund_status"`)}
	}
	if _, ok := rc.mutation.ContentReturn(); !ok {
		return &ValidationError{Name: "content_return", err: errors.New(`ent: missing required field "Refund.content_return"`)}
	}
	if _, ok := rc.mutation.ContentNotify(); !ok {
		return &ValidationError{Name: "content_notify", err: errors.New(`ent: missing required field "Refund.content_notify"`)}
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Refund.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Refund.updated_at"`)}
	}
	return nil
}

func (rc *RefundCreate) sqlSave(ctx context.Context) (*Refund, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (rc *RefundCreate) createSpec() (*Refund, *sqlgraph.CreateSpec) {
	var (
		_node = &Refund{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: refund.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: refund.FieldID,
			},
		}
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.OrderNo(); ok {
		_spec.SetField(refund.FieldOrderNo, field.TypeString, value)
		_node.OrderNo = value
	}
	if value, ok := rc.mutation.RefundNo(); ok {
		_spec.SetField(refund.FieldRefundNo, field.TypeString, value)
		_node.RefundNo = value
	}
	if value, ok := rc.mutation.RefundID(); ok {
		_spec.SetField(refund.FieldRefundID, field.TypeString, value)
		_node.RefundID = value
	}
	if value, ok := rc.mutation.TotalFee(); ok {
		_spec.SetField(refund.FieldTotalFee, field.TypeInt64, value)
		_node.TotalFee = value
	}
	if value, ok := rc.mutation.Refund(); ok {
		_spec.SetField(refund.FieldRefund, field.TypeInt64, value)
		_node.Refund = value
	}
	if value, ok := rc.mutation.Reason(); ok {
		_spec.SetField(refund.FieldReason, field.TypeString, value)
		_node.Reason = value
	}
	if value, ok := rc.mutation.RefundStatus(); ok {
		_spec.SetField(refund.FieldRefundStatus, field.TypeString, value)
		_node.RefundStatus = value
	}
	if value, ok := rc.mutation.ContentReturn(); ok {
		_spec.SetField(refund.FieldContentReturn, field.TypeString, value)
		_node.ContentReturn = value
	}
	if value, ok := rc.mutation.ContentNotify(); ok {
		_spec.SetField(refund.FieldContentNotify, field.TypeString, value)
		_node.ContentNotify = value
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(refund.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(refund.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// RefundCreateBulk is the builder for creating many Refund entities in bulk.
type RefundCreateBulk struct {
	config
	builders []*RefundCreate
}

// Save creates the Refund entities in the database.
func (rcb *RefundCreateBulk) Save(ctx context.Context) ([]*Refund, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Refund, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RefundMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RefundCreateBulk) SaveX(ctx context.Context) []*Refund {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RefundCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RefundCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

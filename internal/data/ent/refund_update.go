// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"pay/internal/data/ent/predicate"
	"pay/internal/data/ent/refund"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RefundUpdate is the builder for updating Refund entities.
type RefundUpdate struct {
	config
	hooks    []Hook
	mutation *RefundMutation
}

// Where appends a list predicates to the RefundUpdate builder.
func (ru *RefundUpdate) Where(ps ...predicate.Refund) *RefundUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetOrderNo sets the "order_no" field.
func (ru *RefundUpdate) SetOrderNo(s string) *RefundUpdate {
	ru.mutation.SetOrderNo(s)
	return ru
}

// SetRefundNo sets the "refund_no" field.
func (ru *RefundUpdate) SetRefundNo(s string) *RefundUpdate {
	ru.mutation.SetRefundNo(s)
	return ru
}

// SetRefundID sets the "refund_id" field.
func (ru *RefundUpdate) SetRefundID(s string) *RefundUpdate {
	ru.mutation.SetRefundID(s)
	return ru
}

// SetTotalFee sets the "total_fee" field.
func (ru *RefundUpdate) SetTotalFee(i int64) *RefundUpdate {
	ru.mutation.ResetTotalFee()
	ru.mutation.SetTotalFee(i)
	return ru
}

// AddTotalFee adds i to the "total_fee" field.
func (ru *RefundUpdate) AddTotalFee(i int64) *RefundUpdate {
	ru.mutation.AddTotalFee(i)
	return ru
}

// SetRefund sets the "refund" field.
func (ru *RefundUpdate) SetRefund(i int64) *RefundUpdate {
	ru.mutation.ResetRefund()
	ru.mutation.SetRefund(i)
	return ru
}

// AddRefund adds i to the "refund" field.
func (ru *RefundUpdate) AddRefund(i int64) *RefundUpdate {
	ru.mutation.AddRefund(i)
	return ru
}

// SetReason sets the "reason" field.
func (ru *RefundUpdate) SetReason(s string) *RefundUpdate {
	ru.mutation.SetReason(s)
	return ru
}

// SetRefundStatus sets the "refund_status" field.
func (ru *RefundUpdate) SetRefundStatus(s string) *RefundUpdate {
	ru.mutation.SetRefundStatus(s)
	return ru
}

// SetContentReturn sets the "content_return" field.
func (ru *RefundUpdate) SetContentReturn(s string) *RefundUpdate {
	ru.mutation.SetContentReturn(s)
	return ru
}

// SetContentNotify sets the "content_notify" field.
func (ru *RefundUpdate) SetContentNotify(s string) *RefundUpdate {
	ru.mutation.SetContentNotify(s)
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *RefundUpdate) SetCreatedAt(t time.Time) *RefundUpdate {
	ru.mutation.SetCreatedAt(t)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *RefundUpdate) SetNillableCreatedAt(t *time.Time) *RefundUpdate {
	if t != nil {
		ru.SetCreatedAt(*t)
	}
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RefundUpdate) SetUpdatedAt(t time.Time) *RefundUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ru *RefundUpdate) SetNillableUpdatedAt(t *time.Time) *RefundUpdate {
	if t != nil {
		ru.SetUpdatedAt(*t)
	}
	return ru
}

// Mutation returns the RefundMutation object of the builder.
func (ru *RefundUpdate) Mutation() *RefundMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RefundUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RefundMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RefundUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RefundUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RefundUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RefundUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   refund.Table,
			Columns: refund.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: refund.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.OrderNo(); ok {
		_spec.SetField(refund.FieldOrderNo, field.TypeString, value)
	}
	if value, ok := ru.mutation.RefundNo(); ok {
		_spec.SetField(refund.FieldRefundNo, field.TypeString, value)
	}
	if value, ok := ru.mutation.RefundID(); ok {
		_spec.SetField(refund.FieldRefundID, field.TypeString, value)
	}
	if value, ok := ru.mutation.TotalFee(); ok {
		_spec.SetField(refund.FieldTotalFee, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedTotalFee(); ok {
		_spec.AddField(refund.FieldTotalFee, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.Refund(); ok {
		_spec.SetField(refund.FieldRefund, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedRefund(); ok {
		_spec.AddField(refund.FieldRefund, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.Reason(); ok {
		_spec.SetField(refund.FieldReason, field.TypeString, value)
	}
	if value, ok := ru.mutation.RefundStatus(); ok {
		_spec.SetField(refund.FieldRefundStatus, field.TypeString, value)
	}
	if value, ok := ru.mutation.ContentReturn(); ok {
		_spec.SetField(refund.FieldContentReturn, field.TypeString, value)
	}
	if value, ok := ru.mutation.ContentNotify(); ok {
		_spec.SetField(refund.FieldContentNotify, field.TypeString, value)
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.SetField(refund.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(refund.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{refund.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// RefundUpdateOne is the builder for updating a single Refund entity.
type RefundUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RefundMutation
}

// SetOrderNo sets the "order_no" field.
func (ruo *RefundUpdateOne) SetOrderNo(s string) *RefundUpdateOne {
	ruo.mutation.SetOrderNo(s)
	return ruo
}

// SetRefundNo sets the "refund_no" field.
func (ruo *RefundUpdateOne) SetRefundNo(s string) *RefundUpdateOne {
	ruo.mutation.SetRefundNo(s)
	return ruo
}

// SetRefundID sets the "refund_id" field.
func (ruo *RefundUpdateOne) SetRefundID(s string) *RefundUpdateOne {
	ruo.mutation.SetRefundID(s)
	return ruo
}

// SetTotalFee sets the "total_fee" field.
func (ruo *RefundUpdateOne) SetTotalFee(i int64) *RefundUpdateOne {
	ruo.mutation.ResetTotalFee()
	ruo.mutation.SetTotalFee(i)
	return ruo
}

// AddTotalFee adds i to the "total_fee" field.
func (ruo *RefundUpdateOne) AddTotalFee(i int64) *RefundUpdateOne {
	ruo.mutation.AddTotalFee(i)
	return ruo
}

// SetRefund sets the "refund" field.
func (ruo *RefundUpdateOne) SetRefund(i int64) *RefundUpdateOne {
	ruo.mutation.ResetRefund()
	ruo.mutation.SetRefund(i)
	return ruo
}

// AddRefund adds i to the "refund" field.
func (ruo *RefundUpdateOne) AddRefund(i int64) *RefundUpdateOne {
	ruo.mutation.AddRefund(i)
	return ruo
}

// SetReason sets the "reason" field.
func (ruo *RefundUpdateOne) SetReason(s string) *RefundUpdateOne {
	ruo.mutation.SetReason(s)
	return ruo
}

// SetRefundStatus sets the "refund_status" field.
func (ruo *RefundUpdateOne) SetRefundStatus(s string) *RefundUpdateOne {
	ruo.mutation.SetRefundStatus(s)
	return ruo
}

// SetContentReturn sets the "content_return" field.
func (ruo *RefundUpdateOne) SetContentReturn(s string) *RefundUpdateOne {
	ruo.mutation.SetContentReturn(s)
	return ruo
}

// SetContentNotify sets the "content_notify" field.
func (ruo *RefundUpdateOne) SetContentNotify(s string) *RefundUpdateOne {
	ruo.mutation.SetContentNotify(s)
	return ruo
}

// SetCreatedAt sets the "created_at" field.
func (ruo *RefundUpdateOne) SetCreatedAt(t time.Time) *RefundUpdateOne {
	ruo.mutation.SetCreatedAt(t)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *RefundUpdateOne) SetNillableCreatedAt(t *time.Time) *RefundUpdateOne {
	if t != nil {
		ruo.SetCreatedAt(*t)
	}
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RefundUpdateOne) SetUpdatedAt(t time.Time) *RefundUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ruo *RefundUpdateOne) SetNillableUpdatedAt(t *time.Time) *RefundUpdateOne {
	if t != nil {
		ruo.SetUpdatedAt(*t)
	}
	return ruo
}

// Mutation returns the RefundMutation object of the builder.
func (ruo *RefundUpdateOne) Mutation() *RefundMutation {
	return ruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RefundUpdateOne) Select(field string, fields ...string) *RefundUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Refund entity.
func (ruo *RefundUpdateOne) Save(ctx context.Context) (*Refund, error) {
	var (
		err  error
		node *Refund
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RefundMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Refund)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RefundMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RefundUpdateOne) SaveX(ctx context.Context) *Refund {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RefundUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RefundUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RefundUpdateOne) sqlSave(ctx context.Context) (_node *Refund, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   refund.Table,
			Columns: refund.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: refund.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Refund.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, refund.FieldID)
		for _, f := range fields {
			if !refund.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != refund.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.OrderNo(); ok {
		_spec.SetField(refund.FieldOrderNo, field.TypeString, value)
	}
	if value, ok := ruo.mutation.RefundNo(); ok {
		_spec.SetField(refund.FieldRefundNo, field.TypeString, value)
	}
	if value, ok := ruo.mutation.RefundID(); ok {
		_spec.SetField(refund.FieldRefundID, field.TypeString, value)
	}
	if value, ok := ruo.mutation.TotalFee(); ok {
		_spec.SetField(refund.FieldTotalFee, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedTotalFee(); ok {
		_spec.AddField(refund.FieldTotalFee, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.Refund(); ok {
		_spec.SetField(refund.FieldRefund, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedRefund(); ok {
		_spec.AddField(refund.FieldRefund, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.Reason(); ok {
		_spec.SetField(refund.FieldReason, field.TypeString, value)
	}
	if value, ok := ruo.mutation.RefundStatus(); ok {
		_spec.SetField(refund.FieldRefundStatus, field.TypeString, value)
	}
	if value, ok := ruo.mutation.ContentReturn(); ok {
		_spec.SetField(refund.FieldContentReturn, field.TypeString, value)
	}
	if value, ok := ruo.mutation.ContentNotify(); ok {
		_spec.SetField(refund.FieldContentNotify, field.TypeString, value)
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.SetField(refund.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(refund.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Refund{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{refund.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.5
// source: pay/v1/pay.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPayServiceCreateTrade = "/product.api.v1.PayService/CreateTrade"
const OperationPayServiceListProduct = "/product.api.v1.PayService/ListProduct"
const OperationPayServiceNotify = "/product.api.v1.PayService/Notify"

type PayServiceHTTPServer interface {
	CreateTrade(context.Context, *CreateTradeRequest) (*CreateTradeReply, error)
	ListProduct(context.Context, *ListProductRequest) (*ListProductReply, error)
	Notify(context.Context, *NotifyRequest) (*NotifyReply, error)
}

func RegisterPayServiceHTTPServer(s *http.Server, srv PayServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/products", _PayService_ListProduct0_HTTP_Handler(srv))
	r.POST("/v1/trade", _PayService_CreateTrade0_HTTP_Handler(srv))
	r.POST("/v1/notify", _PayService_Notify0_HTTP_Handler(srv))
}

func _PayService_ListProduct0_HTTP_Handler(srv PayServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListProductRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPayServiceListProduct)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListProduct(ctx, req.(*ListProductRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListProductReply)
		return ctx.Result(200, reply)
	}
}

func _PayService_CreateTrade0_HTTP_Handler(srv PayServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTradeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPayServiceCreateTrade)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTrade(ctx, req.(*CreateTradeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTradeReply)
		return ctx.Result(200, reply)
	}
}

func _PayService_Notify0_HTTP_Handler(srv PayServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NotifyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPayServiceNotify)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Notify(ctx, req.(*NotifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NotifyReply)
		return ctx.Result(200, reply)
	}
}

type PayServiceHTTPClient interface {
	CreateTrade(ctx context.Context, req *CreateTradeRequest, opts ...http.CallOption) (rsp *CreateTradeReply, err error)
	ListProduct(ctx context.Context, req *ListProductRequest, opts ...http.CallOption) (rsp *ListProductReply, err error)
	Notify(ctx context.Context, req *NotifyRequest, opts ...http.CallOption) (rsp *NotifyReply, err error)
}

type PayServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewPayServiceHTTPClient(client *http.Client) PayServiceHTTPClient {
	return &PayServiceHTTPClientImpl{client}
}

func (c *PayServiceHTTPClientImpl) CreateTrade(ctx context.Context, in *CreateTradeRequest, opts ...http.CallOption) (*CreateTradeReply, error) {
	var out CreateTradeReply
	pattern := "/v1/trade"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPayServiceCreateTrade))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PayServiceHTTPClientImpl) ListProduct(ctx context.Context, in *ListProductRequest, opts ...http.CallOption) (*ListProductReply, error) {
	var out ListProductReply
	pattern := "/v1/products"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPayServiceListProduct))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PayServiceHTTPClientImpl) Notify(ctx context.Context, in *NotifyRequest, opts ...http.CallOption) (*NotifyReply, error) {
	var out NotifyReply
	pattern := "/v1/notify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPayServiceNotify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
